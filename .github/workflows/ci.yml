name: CI/CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
  merge_group:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Optimize Docker builds with BuildKit
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Cache Docker images
      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('supabase/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm config set store-dir ~/.pnpm-store

      # Cache pnpm dependencies
      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install

      # Cache Supabase CLI and configs
      - name: Cache Supabase CLI
        uses: actions/cache@v3
        with:
          path: |
            ~/.supabase
            ~/.config/supabase
          key: ${{ runner.os }}-supabase-${{ hashFiles('**/supabase/config.toml') }}
          restore-keys: |
            ${{ runner.os }}-supabase-

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Restore Supabase Volumes
      - name: Restore Supabase Volumes
        id: restore-volumes
        uses: actions/download-artifact@v3
        with:
          name: supabase-volumes
        continue-on-error: true

      # Extract Supabase Volumes (only if artifact exists)
      - name: Extract Supabase Volumes
        if: steps.restore-volumes.outcome == 'success'
        run: tar -xzf supabase-volumes.tar.gz -C /var/lib/docker/volumes

      - name: Link Vercel Project
        run: pnpm exec vercel link --yes --project ${{ env.VERCEL_PROJECT_ID }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Preview Environment Variables
        run: pnpm exec vercel env pull .env --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Start Supabase
        run: supabase start
        env:
          DOCKER_CLIENT_TIMEOUT: 120
          COMPOSE_HTTP_TIMEOUT: 120

      - name: Link Supabase
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}

      - name: Check Database Changes
        run: supabase db push --dry-run --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}

      - name: Generate Types
        run: pnpm run types

      - name: Format
        run: pnpm run format

      - name: Lint
        run: pnpm run lint

      - name: Run Tests
        run: pnpm run test
        env:
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

      - name: Deploy Preview to Vercel
        if: github.event_name == 'pull_request'
        run: pnpm exec vercel deploy --token=${{ secrets.VERCEL_TOKEN }}

      - name: Compress Supabase Volumes
        run: sudo tar -czf supabase-volumes.tar.gz /var/lib/docker/volumes
      - name: Upload Supabase Volumes
        uses: actions/upload-artifact@v3
        with:
          name: supabase-volumes
          path: supabase-volumes.tar.gz

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'merge_group') && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Cache Docker layers for deployment
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-deploy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-deploy-

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm config set store-dir ~/.pnpm-store

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install

      - name: Format
        run: pnpm run format

      - name: Lint
        run: pnpm run lint

      # Cache Supabase CLI for deployment
      - name: Cache Supabase CLI
        uses: actions/cache@v3
        with:
          path: |
            ~/.supabase
            ~/.config/supabase
          key: ${{ runner.os }}-supabase-deploy-${{ hashFiles('**/supabase/config.toml') }}
          restore-keys: |
            ${{ runner.os }}-supabase-deploy-

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Restore Supabase Volumes
      - name: Restore Supabase Volumes
        id: restore-volumes
        uses: actions/download-artifact@v3
        with:
          name: supabase-volumes
        continue-on-error: true

      # Extract Supabase Volumes (only if artifact exists)
      - name: Extract Supabase Volumes
        if: steps.restore-volumes.outcome == 'success'
        run: tar -xzf supabase-volumes.tar.gz -C /var/lib/docker/volumes

      - name: Link Vercel Project
        run: pnpm exec vercel link --yes --project ${{ env.VERCEL_PROJECT_ID }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Preview Environment Variables
        run: pnpm exec vercel env pull .env --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Start Supabase
        run: supabase start
        env:
          DOCKER_CLIENT_TIMEOUT: 120
          COMPOSE_HTTP_TIMEOUT: 120

      - name: Link Supabase
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}

      - name: Deploy Database Changes
        run: supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}

      - name: Deploy Edge Functions
        run: supabase functions deploy
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}

      - name: Deploy to Vercel
        run: pnpm exec vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Compress Supabase Volumes
        run: sudo tar -czf supabase-volumes.tar.gz /var/lib/docker/volumes
      - name: Upload Supabase Volumes
        uses: actions/upload-artifact@v3
        with:
          name: supabase-volumes
          path: supabase-volumes.tar.gz
